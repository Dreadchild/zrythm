#
#  Copyright (C) 2018-2019 Alexandros Theodotou <alex at zrythm dot org>
#
#  This file is part of Zrythm
#
#  Zrythm is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Zrythm is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Zrythm.  If not, see <https://www.gnu.org/licenses/>.
#

# Add .d to Make's recognized suffixes.
SUFFIXES += .d

# variables
WINDOWS=@WINDOWS@
LINUX=@LINUX@
OSX=@OSX@
HAVE_QT5=@HAVE_QT5@
PROFILING=@PROFILING@
DEBUG=@DEBUG@
WITH_DOCS=@WITH_DOCS@
WITH_X42_PLUGINS=@WITH_X42_PLUGINS@
WITH_DISTRHO_PORTS=@WITH_DISTRHO_PORTS@

CC = @CC@
CXX = @CXX@
DEFS = @DEFS@
INSTALL = install
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_FONT = ${INSTALL} -m 644
LDFLAGS = @LDFLAGS@
MKDIR_P = mkdir -p
GLIB_COMPILE_SCHEMAS = @GLIB_COMPILE_SCHEMAS@
# doesn't work in prefixes like /opt/...
#gsettingsschemadir = @gsettingsschemadir@
OBJEXT = @OBJEXT@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
SHELL = @SHELL@
srcdir = @srcdir@
gsettingsschemadir = `@PKG_CONFIG@ --variable=prefix glib-2.0`/share/glib-2.0/schemas

# Installation directory variables
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
fontdir = @datarootdir@/fonts
htmldir = @htmldir@
includedir = @includedir@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
pdfdir = @pdfdir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@


# library CFLAGS
LIBYAML_CFLAGS = @LIBYAML_CFLAGS@
FFMPEG_CFLAGS = @FFMPEG_CFLAGS@
GTK3_CFLAGS = @GTK3_CFLAGS@
JACK_CFLAGS = @JACK_CFLAGS@
FFTW3F_CFLAGS = @FFTW3F_CFLAGS@
GTOP_CFLAGS = @GTOP_CFLAGS@
LILV_CFLAGS = @LILV_CFLAGS@
LV2_CFLAGS = @LV2_CFLAGS@
PORT_AUDIO_CFLAGS = @PORT_AUDIO_CFLAGS@
QT5_CFLAGS = @QT5_CFLAGS@
SAMPLERATE_CFLAGS = @SAMPLERATE_CFLAGS@
SNDFILE_CFLAGS = @SNDFILE_CFLAGS@
X11_CFLAGS = @X11_CFLAGS@

# library LIBS
LIBYAML_LIBS = @LIBYAML_LIBS@
GTK3_LIBS = @GTK3_LIBS@
FFMPEG_LIBS = @FFMPEG_LIBS@
JACK_LIBS = @JACK_LIBS@
GTOP_LIBS = @GTOP_LIBS@
FFTW3F_LIBS = @FFTW3F_LIBS@
LILV_LIBS = @LILV_LIBS@
LV2_LIBS = @LV2_LIBS@
PORT_AUDIO_LIBS = @PORT_AUDIO_LIBS@
QT5_LIBS = @QT5_LIBS@
SAMPLERATE_LIBS = @SAMPLERATE_LIBS@
SNDFILE_LIBS = @SNDFILE_LIBS@
X11_LIBS = @X11_LIBS@

# -----------------------
#  dirs/names/files
#  ----------------------
BUILD_DIR = build
OBJ_DIR = $(BUILD_DIR)/obj
DEP_DIR = $(BUILD_DIR)/dep
BIN = zrythm
SRC_DIR = src
INC_DIR = inc
DATA_DIR = data
FONTS_DIR = resources/fonts
ICONS_DIR = resources/icons
# lib file here
CYAML_BUILD_DIR = ext/libcyaml/build/release
# execute make here
CYAML_SRC_DIR = ext/libcyaml
CYAML_INC_DIR = ext/libcyaml/include
#lib file here
LIBSMF_BUILD_DIR = ext/libsmf/src/.libs
LIBSMF_INC_DIR = ext/libsmf/src
# execute make here
LIBSMF_SRC_DIR = ext/libsmf
PLUGINS_SRC_DIR= plugins
PLUGINS_INSTALL_DIR = $(libdir)/zrythm/lv2

DEFAULT_INCLUDES = -I. -I./$(INC_DIR) -I./$(SRC_DIR) -I./ext -I./$(LIBSMF_INC_DIR) -I./$(CYAML_INC_DIR)

# -rdynamic gcc flag
ifeq ($(patsubst gcc%,gcc,$(CC)),gcc)
	R_DYNAMIC = -rdynamic
else ifeq ($(patsubst clang%,clang,$(patsubst cc,clang,$(CC))),clang)
	R_DYNAMIC = -Wl,--export-dynamic
else ifeq ($(CC),x86_64-w64-mingw32-gcc)
	#R_DYNAMIC = -export-all-symbols
endif

ifeq ($(WINDOWS),1)
	EXT = .exe
	#EXTRA_LD_FLAGS += -mwindows
	EXTRA_LD_FLAGS += -fno-stack-protector \
										-l ws2_32 -static \
										-static-libgcc \
										-static-libstdc++
else
#EXTRA_LD_FLAGS += -DGDK_DISABLE_DEPRECATED \
#									 -DGTK_DISABLE_DEPRECATED
ifeq ($(LINUX),1)
  EXTRA_LD_FLAGS += -lrt
endif
endif
ifeq ($(PROFILING),1)
	EXTRA_LD_FLAGS += -pg
endif

ifeq ($(LINUX),1)
	EXTRA_LD_FLAGS+= -lasound
endif

ifeq ($(WINDOWS),1)
	FPIC=-mms-bitfields
	MWINDOWS=-mwindows
else
	FPIC=-fPIC
endif

ifeq ($(OSX),1)
	OSX_LIBS += -lobjc -framework Foundation -framework Cocoa -framework AppKit
endif

CFLAGS:=$(filter-out -fstack-protector-strong,$(CFLAGS))
CFLAGS:=$(filter-out -fstack-clash-protection,$(CFLAGS))
CFLAGS:=$(filter-out -D_FORTIFY_SOURCE=2,$(CFLAGS))
CFLAGS += -Wall \
	-Werror=implicit-function-declaration \
	-Werror=return-type \
	-Werror=int-conversion \
	-Werror=format-security \
	-Werror=incompatible-pointer-types \
	-Werror=implicit-int \
	$(DEFAULT_INCLUDES) \
	$(FFMPEG_CFLAGS) \
	$(GTK3_CFLAGS) \
	$(JACK_CFLAGS) \
	$(LIBYAML_CFLAGS) \
	$(FFTW3F_CFLAGS) \
	$(GTOP_CFLAGS) \
	$(LILV_CFLAGS) \
	$(LV2_CFLAGS) \
	$(PORT_AUDIO_CFLAGS) \
	$(SAMPLERATE_CFLAGS) \
	$(SNDFILE_CFLAGS) \
	$(X11_CFLAGS) \
	-DCONFIGURE_DATADIR=\"$(datadir)\" \
	-DCONFIGURE_LIBDIR=\"$(libdir)\" \
	$(FPIC) \
	$(MWINDOWS)

ifeq ($(PROFILING),1)
	CFLAGS += -pg
endif
ifeq ($(DEBUG),1)
	CFLAGS += -g
endif

ifeq ($(LINUX),1)
	LM=-lm
endif

ifeq ($(WINDOWS),1)
	BDYNAMIC=-Wl,-Bdynamic
	AS_NEEDED=-Wl,-as-needed
endif

LDFLAGS +=	\
	$(EXTRA_LD_FLAGS) \
	$(BDYNAMIC) \
	$(FFMPEG_LIBS) \
  $(GTK3_LIBS) \
	$(JACK_LIBS) \
	$(LIBYAML_LIBS) \
	$(FFTW3F_LIBS) \
	$(GTOP_LIBS) \
	$(LILV_LIBS) \
	$(LV2_LIBS) \
	$(PORT_AUDIO_LIBS) \
	$(SAMPLERATE_LIBS) \
	$(SNDFILE_LIBS) \
	$(X11_LIBS) \
 	$(R_DYNAMIC) \
	$(LM) \
	$(FPIC) \
	-lpthread \
	$(AS_NEEDED) \
	$(MWINDOWS)


built_src = $(BUILD_DIR)/resources.c
built_obj = $(built_src:%.c=$(BUILD_DIR/%.o))
built_dep = $(built_obj:%.o=%.d))

#Find all the C++ files in the src/ directory
SRCS = $(shell find src -name "*.c") \
			 $(shell find ext/audio_decoder -name "*.c")
SRCS_CPP = $(shell find src -name "*.cpp")
ifeq ($(OSX),1)
SRCS_OBJC = $(shell find src -name "*.m")
endif
SRCS_UI =	$(shell find resources/ui -name "*.ui")
# All .o files go to build dir.
OBJ = $(SRCS:%.c=$(BUILD_DIR)/%.c.o)
OBJ_CPP = $(SRCS_CPP:%.cpp=$(BUILD_DIR)/%.cpp.o)
OBJ_OBJC = $(SRCS_OBJC:%.cpp=$(BUILD_DIR)/%.m.o)
# Gcc/Clang will create these .d files containing dependencies.
DEP = $(OBJ:%.o=%.d)
DEP_CPP = $(OBJ_CPP:%.o=%.d)
TEST_SRCS = $(shell find test -name "*.c")
OBJ_NO_MAIN = $(shell echo "$(OBJ)" | sed 's|build/src/main.c.o| |g')
TEST_OBJ = $(TEST_SRCS:%.c=$(BUILD_DIR)/%.c.o)
TEST_DEP = $(TEST_OBJ:%.o=%.d)
TEST_BIN = $(BUILD_DIR)/zrythm-test

gsettings_SCHEMAS = org.zrythm.gschema.xml
#EXTRA_DIST = $(gsettings_SCHEMAS)

# desktop file
desktopdir = $(datadir)/applications
desktop_DATA = zrythm.desktop

#the application icon
appicondir=$(datadir)/icons/hicolor/scalable/apps
appicondir2=$(datadir)/icons/hicolor/48x48/apps
appicon_DATA_srcdir = resources/icons/zrythm
appicon_DATA = zrythm.svg

# dlfcn
ifeq ($(WINDOWS),1)
	DLFCN_LIB=$(libdir)/libdl.dll.a
endif

# libyaml
ifeq ($(WINDOWS),1)
	CYAML_AR=$(subst gcc,ar,$(CC))
else
	CYAML_AR=ar
endif

# libsmf
ifeq ($(WINDOWS),1)
	LIBSMF_CONFIGURE=$(subst gcc,configure,$(CC)) .
	LIBSMF_LDFLAGS="-lws2_32 "
else
	LIBSMF_CONFIGURE=./configure
endif

# x42 plugins
ifeq ($(WITH_X42_PLUGINS),1)
	X42_PLUGINS_SRC_DIRS = \
		$(PLUGINS_SRC_DIR)/midifilter.lv2-0.5.3 \
		$(PLUGINS_SRC_DIR)/fat1.lv2-0.5.2 \
		$(PLUGINS_SRC_DIR)/meters.lv2-0.9.11 \
		$(PLUGINS_SRC_DIR)/midigen.lv2-0.2.5 \
		$(PLUGINS_SRC_DIR)/sisco.lv2-0.8.1 \
		$(PLUGINS_SRC_DIR)/testsignal.lv2-0.5.2 \
		$(PLUGINS_SRC_DIR)/tuna.lv2-0.4.12
	X42_PLUGINS_BINS = \
		$(PLUGINS_SRC_DIR)/midifilter.lv2-0.5.3/build/midifilter.so \
		$(PLUGINS_SRC_DIR)/fat1.lv2-0.5.2/build/fat1.so \
		$(PLUGINS_SRC_DIR)/meters.lv2-0.9.11/build/meters.so \
		$(PLUGINS_SRC_DIR)/midigen.lv2-0.2.5/build/midigen.so \
		$(PLUGINS_SRC_DIR)/sisco.lv2-0.8.1/build/sisco.so \
		$(PLUGINS_SRC_DIR)/testsignal.lv2-0.5.2/build/testsignal.so \
		$(PLUGINS_SRC_DIR)/tuna.lv2-0.4.12/build/tuna.so
	INSTALL_X42_PLUGINS=install-x42-plugins
ifeq ($(WINDOWS),1)
	X42_PLUGINS_XWIN=1
endif
endif

# DISTRHO ports
ifeq ($(WITH_DISTRHO_PORTS),1)
ifeq ($(WINDOWS),1)
	DISTRHO_OS=mingw
endif
ifeq ($(OSX),1)
	DISTRHO_OS=mac
endif
ifeq ($(LINUX),1)
	DISTRHO_OS=linux
endif
	DISTRHO_PORTS_SRC_DIR = $(PLUGINS_SRC_DIR)/DISTRHO-Ports-master
	DISTRHO_PORTS_BIN_DIR = $(DISTRHO_PORTS_SRC_DIR)/bin/lv2
	DISTRHO_PORTS_BINS = \
		$(DISTRHO_PORTS_BIN_DIR)/Dexed.lv2/Dexed.so \
		$(DISTRHO_PORTS_BIN_DIR)/LUFSMeter.lv2/LUFSMeter.so \
		$(DISTRHO_PORTS_BIN_DIR)/eqinox.lv2/eqinox.so \
		$(DISTRHO_PORTS_BIN_DIR)/ThePilgrim.lv2/ThePilgrim.so \
		$(DISTRHO_PORTS_BIN_DIR)/LUFSMeterMulti.lv2/LUFSMeterMulti.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Filter-2.lv2/TAL-Filter-2.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Vocoder-2.lv2/TAL-Vocoder-2.so \
		$(DISTRHO_PORTS_BIN_DIR)/drowaudio-reverb.lv2/drowaudio-reverb.so \
		$(DISTRHO_PORTS_BIN_DIR)/TheFunction.lv2/TheFunction.so \
		$(DISTRHO_PORTS_BIN_DIR)/drowaudio-distortionshaper.lv2/drowaudio-distortionshaper.so \
		$(DISTRHO_PORTS_BIN_DIR)/StereoSourceSeparation.lv2/StereoSourceSeparation.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Dub-3.lv2/TAL-Dub-3.so \
		$(DISTRHO_PORTS_BIN_DIR)/drumsynth.lv2/drumsynth.so \
		$(DISTRHO_PORTS_BIN_DIR)/Obxd.lv2/Obxd.so \
		$(DISTRHO_PORTS_BIN_DIR)/HiReSam.lv2/HiReSam.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Reverb.lv2/TAL-Reverb.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Reverb-3.lv2/TAL-Reverb-3.so \
		$(DISTRHO_PORTS_BIN_DIR)/EasySSP.lv2/EasySSP.so \
		$(DISTRHO_PORTS_BIN_DIR)/drowaudio-tremolo.lv2/drowaudio-tremolo.so \
		$(DISTRHO_PORTS_BIN_DIR)/PitchedDelay.lv2/PitchedDelay.so \
		$(DISTRHO_PORTS_BIN_DIR)/drowaudio-flanger.lv2/drowaudio-flanger.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Filter.lv2/TAL-Filter.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-NoiseMaker.lv2/TAL-NoiseMaker.so \
		$(DISTRHO_PORTS_BIN_DIR)/drowaudio-distortion.lv2/drowaudio-distortion.so \
		$(DISTRHO_PORTS_BIN_DIR)/JuceOPL.lv2/JuceOPL.so \
		$(DISTRHO_PORTS_BIN_DIR)/Luftikus.lv2/Luftikus.so \
		$(DISTRHO_PORTS_BIN_DIR)/TAL-Reverb-2.lv2/TAL-Reverb-2.so \
		$(DISTRHO_PORTS_BIN_DIR)/ReFine.lv2/ReFine.so \
		$(DISTRHO_PORTS_BIN_DIR)/KlangFalter.lv2/KlangFalter.so \
		$(DISTRHO_PORTS_BIN_DIR)/Wolpertinger.lv2/Wolpertinger.so
	INSTALL_DISTRHO_PORTS=install-distrho-ports
endif

# static libs
STATIC_LIBS=$(CYAML_BUILD_DIR)/libcyaml.a $(LIBSMF_BUILD_DIR)/libsmf.a $(DLFCN_LIB)

# -----------------------------
#  rules
#  ----------------------------

# Default target
ifeq ($(WINDOWS),1)
all: $(BUILD_DIR)/data/icon.o $(BUILD_DIR)/$(BIN)$(EXT) messages plugins package-win test
else
all: $(BUILD_DIR)/$(BIN)$(EXT) messages plugins test
endif

messages: po/fr/$(BIN).mo po/de/$(BIN).mo po/es/$(BIN).mo po/it/$(BIN).mo po/ja/$(BIN).mo

po/fr/$(BIN).mo: po/fr/$(BIN).po
	msgfmt --output-file=$@ $<
po/fr/$(BIN).po: po/$(BIN).pot
	msgmerge --update $@ $<
po/de/$(BIN).mo: po/de/$(BIN).po
	msgfmt --output-file=$@ $<
po/de/$(BIN).po: po/$(BIN).pot
	msgmerge --update $@ $<
po/es/$(BIN).mo: po/es/$(BIN).po
	msgfmt --output-file=$@ $<
po/es/$(BIN).po: po/$(BIN).pot
	msgmerge --update $@ $<
po/it/$(BIN).mo: po/it/$(BIN).po
	msgfmt --output-file=$@ $<
po/it/$(BIN).po: po/$(BIN).pot
	msgmerge --update $@ $<
po/ja/$(BIN).mo: po/ja/$(BIN).po
	msgfmt --output-file=$@ $<
po/ja/$(BIN).po: po/$(BIN).pot
	msgmerge --update $@ $<

po/$(BIN).pot: $(SRCS) $(SRCS_CPP) $(SRCS_UI)
	xgettext --keyword=_ --add-comments=TRANSLATORS: --sort-output -o $@ $^

# for windows .exe icon
ifeq ($(WINDOWS),1)
EXEICON=$(BUILD_DIR)/data/icon.o
$(EXEICON): data/zrythm.ico
	$(MKDIR_P) "$(BUILD_DIR)/data"
	cp data/zrythm.ico "$(BUILD_DIR)/data/"
	echo "id ICON $(BUILD_DIR)/data/zrythm.ico" > "$(BUILD_DIR)/data/icon.rc"
	$(subst gcc,windres,$(CC)) -o \
		$(BUILD_DIR)/data/icon.o \
		$(BUILD_DIR)/data/icon.rc
endif

# Actual target of the binary - depends on all .o files.
$(BUILD_DIR)/$(BIN)$(EXT): $(OBJ) $(OBJ_CPP) $(OBJ_OBJC) $(BUILD_DIR)/resources.o $(EXEICON) $(STATIC_LIBS)
	# Create build directories - same structure as sources.
	$(MKDIR_P) $(@D)
	# Just link all the object files.

	$(CC) $^ $(LDFLAGS) $(QT5_LIBS) -lstdc++ $(OSX_LIBS) -o $@
	# done

# creates a redistributable windows folder after the
# build finishes
.PHONY: package-win
package-win: $(BUILD_DIR)/$(BIN)$(EXT)
	# schemas
	$(MKDIR_P) "$(BUILD_DIR)/schemas"
	$(INSTALL_DATA) $(DATA_DIR)/$(gsettings_SCHEMAS) \
	  "$(BUILD_DIR)/schemas/"
	cp $(prefix)/share/glib-2.0/schemas/org.gtk.Settings.* $(BUILD_DIR)/schemas
	$(GLIB_COMPILE_SCHEMAS) "$(BUILD_DIR)/schemas"
	chmod +x scripts/package_win.sh
	scripts/package_win.sh $(prefix)

# build libcyaml
$(CYAML_BUILD_DIR)/libcyaml.a:
	cd $(CYAML_SRC_DIR) && \
		$(MAKE) build/release/libcyaml.a VARIANT=release \
		PREFIX=$(prefix) CC=$(CC) AR=$(CYAML_AR) \
		LDFLAGS+="$(shell $(PKG_CONFIG) --libs yaml-0.1)"

# build libsmf
$(LIBSMF_BUILD_DIR)/libsmf.a:
	cd $(LIBSMF_SRC_DIR) && autoreconf -fi && \
		LDFLAGS+=$(LIBSMF_LDFLAGS) ac_cv_func_malloc_0_nonnull=yes ac_cv_func_realloc_0_nonnull=yes $(LIBSMF_CONFIGURE) && $(MAKE)

$(BUILD_DIR)/zrythm.gresource.xml: resources/gen-gtk-gresources-xml.py \
	resources/icons/breeze-icons/gen-hicolor.py \
	resources/theme.css \
	resources/ui/*.ui \
	resources/icons/zrythm/*.svg \
	resources/icons/gnome-builder/*.svg
	resources/icons/breeze-icons/gen-hicolor.py resources/icons/breeze-icons resources/icons/breeze-icons
	resources/gen-gtk-gresources-xml.py resources $@

$(BUILD_DIR)/resources.c: $(BUILD_DIR)/zrythm.gresource.xml
	$(MKDIR_P) $(BUILD_DIR)
	glib-compile-resources $(BUILD_DIR)/zrythm.gresource.xml --target=$(BUILD_DIR)/resources.c \
	--generate-source --sourcedir=resources

# Include all dep files
-include $(DEP)
-include $(DEP_CPP)
-include $(TEST_DEP)

# Build target for every single object file.
# The potential dependency on header files is covered
# by calling `-include $(DEP)`.
# The -MMD flags additionaly creates a .d file with
# the same name as the .o file.
$(BUILD_DIR)/%.c.$(OBJEXT): %.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(CFLAGS) -MMD -c $< -o $@

$(BUILD_DIR)/%.cpp.$(OBJEXT): %.cpp
	$(MKDIR_P) $(dir $@)
	$(CXX) $(CFLAGS) $(QT5_CFLAGS) -MMD -c $< -o $@

$(BUILD_DIR)/%.m.$(OBJEXT): %.m
	$(MKDIR_P) $(dir $@)
	$(CC) $(CFLAGS) $(OSX_LIBS) -c $< -o $@

$(X42_PLUGINS_BINS):
	for dir in $(X42_PLUGINS_SRC_DIRS); \
	do \
		pushd $${dir}; \
		XWIN=$(X42_PLUGINS_XWIN) $(MAKE); \
		${MAKE} install PREFIX=./build; \
		popd; \
	done

$(DISTRHO_PORTS_BINS):
	cd $(DISTRHO_PORTS_SRC_DIR) && \
	./scripts/premake-update.sh $(DISTRHO_OS) && \
	${MAKE} lv2

.PHONY: plugins
plugins: $(X42_PLUGINS_BINS) $(DISTRHO_PORTS_BINS)

.PHONY: doc
doc:
	doxygen Doxyfile.cfg

.PHONY: clean
clean:
	#rm -rf $(BUILD_DIR)/*
	# This should remove all generated files.
	#-rm $(BUILD_DIR)/$(BIN)$(EXT) $(OBJ) $(DEP)
	#-rm $(BUILD_DIR)/zrythm.gresource.xml
	-rm -rf $(BUILD_DIR)
	-rm -rf doc/html
	-rm po/fr/*.mo
	-rm po/de/*.mo
	-rm po/it/*.mo
	-rm po/es/*.mo
	-rm po/ja/*.mo
	cd $(CYAML_SRC_DIR) && $(MAKE) clean
	#-rm -rf $(CYAML_BUILD_DIR)
	cd $(LIBSMF_SRC_DIR) && autoreconf -i && \
		$(LIBSMF_CONFIGURE) && $(MAKE) clean
	#-rm -rf $(LIBSMF_BUILD_DIR)
	for dir in $(X42_PLUGINS_SRC_DIRS); \
	do \
		pushd $${dir}; \
		rm -rf build; \
		popd; \
	done
	-rm -rf $(DISTRHO_PORTS_BIN_DIR)

.PHONY: install
install: $(BUILD_DIR)/$(BIN)$(EXT) install-appicon-data install-desktop-data install-gschemas install-fonts install-messages install-plugins
	$(MKDIR_P) $(DESTDIR)$(bindir)
	$(INSTALL) $< $(DESTDIR)$(bindir)/$(BIN)$(EXT)

.PHONY: uninstall
uninstall: uninstall-appicon-data uninstall-gschemas uninstall-desktop uninstall-messages
	rm -f $(bindir)/$(BIN)$(EXT)

.PHONY: install-messages
install-messages:
	$(MKDIR_P) "$(DESTDIR)$(localedir)/fr/LC_MESSAGES"
	$(INSTALL_DATA) po/fr/$(BIN).mo "$(DESTDIR)$(localedir)/fr/LC_MESSAGES/"
	$(MKDIR_P) "$(DESTDIR)$(localedir)/de/LC_MESSAGES"
	$(INSTALL_DATA) po/de/$(BIN).mo "$(DESTDIR)$(localedir)/de/LC_MESSAGES/"
	$(MKDIR_P) "$(DESTDIR)$(localedir)/it/LC_MESSAGES"
	$(INSTALL_DATA) po/it/$(BIN).mo "$(DESTDIR)$(localedir)/it/LC_MESSAGES/"
	$(MKDIR_P) "$(DESTDIR)$(localedir)/es/LC_MESSAGES"
	$(INSTALL_DATA) po/es/$(BIN).mo "$(DESTDIR)$(localedir)/es/LC_MESSAGES/"
	$(MKDIR_P) "$(DESTDIR)$(localedir)/ja/LC_MESSAGES"
	$(INSTALL_DATA) po/ja/$(BIN).mo "$(DESTDIR)$(localedir)/ja/LC_MESSAGES/"

.PHONY: install-x42-plugins
install-x42-plugins: $(X42_PLUGINS_BINS)
	if [ -z "$(X42_PLUGINS_SRC_DIRS)" ]; then \
		exit 0; \
	fi
	mkdir -p $(PLUGINS_INSTALL_DIR)
	for dir in $(X42_PLUGINS_SRC_DIRS); do \
		pushd $${dir}; \
		cp -R build/lib/lv2/* "$(DESTDIR)$(PLUGINS_INSTALL_DIR)/"; \
		popd; \
	done

.PHONY: install-distrho-ports
install-distrho-ports: $(DISTRHO_PORTS_BINS)
	cd $(DISTRHO_PORTS_SRC_DIR) && \
	cp -R $(DISTRHO_PORTS_BIN_DIR)/*.lv2 "$(DESTDIR)$(PLUGINS_INSTALL_DIR)/"

.PHONY: install-plugins
install-plugins: $(INSTALL_X42_PLUGINS) $(INSTALL_DISTRHO_PORTS)

.PHONY: install-appicon-data
install-appicon-data: $(appicon_DATA_srcdir)/$(appicon_DATA)
	$(MKDIR_P) "$(DESTDIR)$(appicondir)"
	$(INSTALL_DATA) $< "$(DESTDIR)$(appicondir)/"
	$(MKDIR_P) "$(DESTDIR)$(appicondir2)"
	$(INSTALL_DATA) $< "$(DESTDIR)$(appicondir2)/"

.PHONY: uninstall-appicon-data
uninstall-appicon-data:
	rm -f $< "$(DESTDIR)$(appicondir)/$(appicon_DATA)"

.PHONY: uninstall-plugins
uninstall-plugins:
	-rm -rf "$(DESTDIR)$(PLUGINS_INSTALL_DIR)"

.PHONY: install-gschemas
install-gschemas: $(DATA_DIR)/$(gsettings_SCHEMAS)
	$(MKDIR_P) "$(DESTDIR)$(gsettingsschemadir)"
	$(INSTALL_DATA) $< "$(DESTDIR)$(gsettingsschemadir)/"
ifeq ($(DESTDIR),)
	$(GLIB_COMPILE_SCHEMAS) "$(DESTDIR)$(gsettingsschemadir)"
endif

.PHONY: uninstall-gschemas
uninstall-gschemas:
	rm -f $(gsettingsschemadir)/$(gsettings_SCHEMAS)
	$(GLIB_COMPILE_SCHEMAS) "$(DESTDIR)$(gsettingsschemadir)"

.PHONY: uninstall-messages
uninstall-messages:
	rm -f "$(DESTDIR)$(localedir)/fr/LC_MESSAGES/$(BIN).mo"
	rm -f "$(DESTDIR)$(localedir)/de/LC_MESSAGES/$(BIN).mo"
	rm -f "$(DESTDIR)$(localedir)/it/LC_MESSAGES/$(BIN).mo"
	rm -f "$(DESTDIR)$(localedir)/es/LC_MESSAGES/$(BIN).mo"
	rm -f "$(DESTDIR)$(localedir)/ja/LC_MESSAGES/$(BIN).mo"

.PHONY: install-fonts
install-fonts: $(FONTS_DIR)/Segment7Standard/*
	$(MKDIR_P) "$(DESTDIR)$(fontdir)/$(BIN)/Segment7Standard"
	$(INSTALL_FONT) $< "$(DESTDIR)$(fontdir)/$(BIN)/Segment7Standard/"

.PHONY: install-desktop-data
install-desktop-data: $(DATA_DIR)/$(desktop_DATA)
	$(MKDIR_P) "$(DESTDIR)$(desktopdir)"
	$(INSTALL_DATA) $< "$(DESTDIR)$(desktopdir)/"

.PHONY: uninstall-desktop
uninstall-desktop-data:
	rm -f $(desktopdir)/$(desktop_DATA)

.PHONY: test
ifeq ($(WINDOWS),1)
test: $(TEST_BIN)$(EXT) package-win
	wine $^
else
test: $(TEST_BIN)$(EXT)
	$^
endif

$(TEST_BIN)$(EXT): $(TEST_OBJ) $(OBJ_NO_MAIN) $(OBJ_CPP) $(OBJ_OBJC) $(BUILD_DIR)/resources.o $(STATIC_LIBS)
	# Create build directories - same structure as sources.
	$(MKDIR_P) $(@D)
	# Just link all the object files.
	$(CC) $^ $(LDFLAGS) $(QT5_LIBS) -lstdc++ $(OSX_LIBS) -o $@
	# done

$(BUILD_DIR)/test/%.c.$(OBJEXT): test/%.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(CFLAGS) -MMD -c $< -o $@
