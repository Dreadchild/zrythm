# Add .d to Make's recognized suffixes.
SUFFIXES += .d

# -----------------------
#  dirs/names/files
#  ----------------------
ifdef RELEASE
	BUILD_DIR = build/release
else
	BUILD_DIR = build/debug
endif
OBJ_DIR = $(BUILD_DIR)/obj
DEP_DIR = $(BUILD_DIR)/dep
BIN = zrythm
SRC_DIR = src
INC_DIR = inc
DATA_DIR = data

CC = @CC@
DEFS = @DEFS@
INSTALL = install
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
LDFLAGS = @LDFLAGS@
MKDIR_P = mkdir -p
GLIB_COMPILE_SCHEMAS = @GLIB_COMPILE_SCHEMAS@
gsettingsschemadir = @gsettingsschemadir@
OBJEXT = @OBJEXT@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
SHELL = @SHELL@
srcdir = @srcdir@

# test

# Installation directory variables
bindir = @bindir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
htmldir = @htmldir@
includedir = @includedir@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
pdfdir = @pdfdir@
prefix = @prefix@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@


# library CFLAGS
GTK_CFLAGS = @GTK_CFLAGS@
JACK_CFLAGS = @JACK_CFLAGS@
LILV_CFLAGS = @LILV_CFLAGS@
LV2_CFLAGS = @LV2_CFLAGS@
PANGOFT2_CFLAGS = @PANGOFT2_CFLAGS@
SUIL_CFLAGS = @SUIL_CFLAGS@

# library LIBS
GTK_LIBS = @GTK_LIBS@
JACK_LIBS = @JACK_LIBS@
LILV_LIBS = @LILV_LIBS@
LV2_LIBS = @LV2_LIBS@
PANGO_LIBS = @PANGO_LIBS@
PANGOFT2_LIBS = @PANGOFT2_LIBS@
SUIL_LIBS = @SUIL_LIBS@

DEFAULT_INCLUDES = -I. -I./$(INC_DIR) -I./$(SRC_DIR)

ifdef RELEASE
	DEFAULT_CFLAGS = -O3
else
	DEFAULT_CFLAGS = -g -O0
endif

CFLAGS = -Wall -rdynamic \
						$(DEFAULT_INCLUDES) \
						$(GTK_CFLAGS) \
						$(JACK_CFLAGS) \
						$(LV2_CFLAGS) \
						$(LILV_CFLAGS) \
						$(SUIL_CFLAGS) \
						$(PANGO_CFLAGS) \
						$(PANGOFT2_CFLAGS) \
						$(DEFAULT_CFLAGS)

LDFLAGS =	$(GTK_LIBS) \
			    $(JACK_LIBS) \
			    $(LV2_LIBS) \
			    $(LILV_LIBS) \
				  $(SUIL_LIBS) \
				  $(PANGO_LIBS) \
				  $(PANGOFT2_LIBS) \
			    -lm \
					-lpthread

built_src = $(BUILD_DIR)/resources.c
built_obj = $(built_src:%.c=$(BUILD_DIR/%.o))
built_dep = $(built_obj:%.o=%.d))

#Find all the C++ files in the src/ directory
SRCS = $(shell find src/ -name "*.c")
# All .o files go to build dir.
OBJ = $(SRCS:%.c=$(BUILD_DIR)/%.o)
# Gcc/Clang will create these .d files containing dependencies.
DEP = $(OBJ:%.o=%.d)

gsettings_SCHEMAS = $(DATA_DIR)/online.alextee.zrythm.gschema.xml
#EXTRA_DIST = $(gsettings_SCHEMAS)

# desktop file
desktopdir = $(datadir)/applications
desktop_DATA = $(DATA_DIR)/zrythm.desktop

#the application icon
appicondir=$(datadir)/icons/hicolor/scalable/apps
appicon_DATA = resources/z.svg


# -----------------------------
#  rules
#  ----------------------------

# Default target named after the binary.
$(BIN) : $(BUILD_DIR)/$(BIN)

# Actual target of the binary - depends on all .o files.
$(BUILD_DIR)/$(BIN): $(OBJ) $(BUILD_DIR)/resources.o
	# Create build directories - same structure as sources.
	$(MKDIR_P) $(@D)
	# Just link all the object files.
	$(CC) $(CFLAGS) $^ $(LDFLAGS) -o $@

# Include all dep files
-include $(DEP)

$(BUILD_DIR)/resources.o: $(BUILD_DIR)/resources.c
	$(MKDIR_P) $(dir $@)
	# The -MMD flags additionaly creates a .d file with
	# the same name as the .o file.
	$(CC) $(CFLAGS) -MMD -c $< -o $@ $(LDFLAGS)


$(BUILD_DIR)/resources.c: $(SRC_DIR)/zrythm.gresource.xml \
	resources/ui/*.ui \
	resources/theme.css \
	resources/*.svg
	$(MKDIR_P) $(BUILD_DIR)
	glib-compile-resources $(SRC_DIR)/zrythm.gresource.xml --target=$(BUILD_DIR)/resources.c \
	--generate-source --sourcedir=resources

# Build target for every single object file.
# The potential dependency on header files is covered
# by calling `-include $(DEP)`.
$(BUILD_DIR)/%.$(OBJEXT): %.c
	$(MKDIR_P) $(dir $@)
	# The -MMD flags additionaly creates a .d file with
	# the same name as the .o file.
	$(CC) $(CFLAGS) -MMD -c $< -o $@ $(LDFLAGS)

.PHONY: clean
clean:
	#rm -rf $(BUILD_DIR)/*
	# This should remove all generated files.
	-rm $(BUILD_DIR)/$(BIN) $(OBJ) $(DEP)

.PHONY: install
install: $(BUILD_DIR)/$(BIN) install-appicon-data install-desktop-data install-gschemas
	$(MKDIR_P) $(DESTDIR)$(bindir)
	$(INSTALL) $< $(DESTDIR)$(bindir)/$(BIN)

.PHONY: uninstall
uninstall:
	rm -f $(DESTDIR)$(bindir)/$(BIN)

.PHONY: install-appicon-data
install-appicon-data: $(appicon_DATA)
	$(INSTALL_DATA) $< "$(DESTDIR)$(appicondir)"

.PHONY: install-gschemas
install-gschemas: $(gsettings_SCHEMAS)
	$(INSTALL) $< $(gsettingsschemadir)/
	$(GLIB_COMPILE_SCHEMAS) $(gsettingsschemadir)

.PHONY: install-desktop
install-desktop-data: $(desktop_DATA)
	$(INSTALL_DATA) $< "$(DESTDIR)$(desktopdir)"

